//
//  SignInViewController.m
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-objc v0.20
//
//
#import <Foundation/Foundation.h>
#import "SignInViewController.h"
#import "PlantTableController.h"
#import <AWSCore/AWSCore.h>
#import <AWSMobileHubHelper/AWSMobileHubHelper.h>
#import <AWSGoogleSignIn/AWSGoogleSignIn.h>
#import <Onboard/OnboardingViewController.h>
#import <Onboard/OnboardingContentViewController.h>

static NSString *LOG_TAG;

@interface SignInViewController ()


@end

@interface SignInViewController() <AWSSignInDelegate>

@end

@implementation SignInViewController

static NSString *SMALL_IMAGE_NAME;
static NSString *BIG_IMAGE_NAME;

@synthesize canCancel;

+ (void)initialize {
    [super initialize];
    LOG_TAG = NSStringFromClass(self);
    SMALL_IMAGE_NAME = @"logo-aws-small";
    BIG_IMAGE_NAME = @"logo-aws-big";
    // Google login scopes can be optionally set, but must be set
    // before user authenticates.
    [[AWSGoogleSignInProvider sharedInstance] setScopes:@[@"profile", @"openid"]];
}

- (id)initWithCoder:(NSCoder *)decoder {
    if (self  = [super initWithCoder:decoder]) {
        canCancel = YES;
    }
    return self;
}


#pragma mark - UIViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    [self.navigationController setNavigationBarHidden:YES animated:YES];
    // set up google button if enabled
    [self setUpGoogleButton];
    
    //Logout
    [[AWSSignInManager sharedInstance] logoutWithCompletionHandler:^(id result, AWSIdentityManagerAuthState authState, NSError *error) {
    }];
    
}

#pragma mark - Utility Methods

- (void)handleLoginWithSignInProvider:(id<AWSSignInProvider>)signInProvider {
    [[AWSSignInManager sharedInstance]
        loginWithSignInProviderKey:[signInProvider identityProviderName]
              completionHandler:^(id result, AWSIdentityManagerAuthState authState, NSError *error) {
                                    if (!error) {
                                        dispatch_async(dispatch_get_main_queue(), ^{
                                            PlantTableController *tagEditor = [self.storyboard instantiateViewControllerWithIdentifier:@"PlantTable"];
                                            [[self navigationController] pushViewController:tagEditor animated:YES];
//                                            [self presentViewController:tagEditor animated:YES completion:nil];
                                            if (self.didCompleteSignIn) {
                                                self.didCompleteSignIn(YES);
                                            }
                                        });
                                    }
                                    NSLog(@"result = %@, error = %@", result, error);
                                }];
}



- (void)barButtonClosePressed {
    [self dismissViewControllerAnimated:YES completion:nil];
    if (self.didCompleteSignIn) {
        self.didCompleteSignIn(NO);
    }
}


- (void)setUpGoogleButton {
    [[AWSGoogleSignInProvider sharedInstance] setViewControllerForGoogleSignIn:self];
    
    // Google UI Setup
    AWSGoogleSignInButton *googleComponent = [[AWSGoogleSignInButton alloc] initWithFrame:CGRectMake(0, 0, self.googleButton.frame.size.width, self.googleButton.frame.size.height)];
    googleComponent.buttonStyle = AWSSignInButtonStyleLarge;
    googleComponent.delegate = self;
    [self.googleButton addSubview:googleComponent];
}

- (void)showErrorDialog:(NSString *)loginProviderName withError:(const NSError *)error {
    NSLog(@"%@: %@ failed to sign in w/ error: %@", LOG_TAG, loginProviderName, error);

    UIAlertController *alertController =
        [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Sign-in Provider Sign-In Error",
                                                                      @"Sign-in error for sign-in failure.")
                                            message:NSLocalizedString(@"%@ failed to sign in w/ error: %@",
                                                                      @"Sign-in message structure for sign-in failure.")
                                     preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *doneAction =
        [UIAlertAction actionWithTitle:NSLocalizedString(@"Cancel",
                                                         @"Label to cancel sign-in failure.")
                                 style:UIAlertActionStyleCancel
                                handler:nil];
    [alertController addAction:doneAction];

    [self presentViewController:alertController
                       animated:YES
                     completion:nil];
}


- (void)onLoginWithSignInProvider:(id<AWSSignInProvider>)signInProvider
                           result:(id _Nullable)result
                        authState:(AWSIdentityManagerAuthState)authState
                            error:(NSError * _Nullable)error {
    if (!error) {
        dispatch_async(dispatch_get_main_queue(), ^{
            PlantTableController *tagEditor = [self.storyboard instantiateViewControllerWithIdentifier:@"PlantTable"];
//            [self presentViewController:tagEditor animated:YES completion:nil];
            [[self navigationController] pushViewController:tagEditor animated:YES];
            if (self.didCompleteSignIn) {
                self.didCompleteSignIn(YES);
            }
        });
    }
    NSLog(@"result = %@, authState= %ld error = %@", result, (long)authState, error);
}

- (BOOL)prefersStatusBarHidden {
    return NO;
}

-(UIStatusBarStyle)preferredStatusBarStyle {
    return UIStatusBarStyleLightContent;
}

- (void) viewWillAppear:(BOOL)animated{
    [self.navigationController setNavigationBarHidden:YES animated:NO];
    [super viewWillAppear:animated];
}

-(void)viewWillDisappear:(BOOL)animated{
    self.navigationController.navigationBarHidden=YES;
}

@end
